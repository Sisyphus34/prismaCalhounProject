{"version":3,"sources":["generated/apollo-components.tsx","components/Header.js","components/VerticallyCenteredModal.js","components/MenuItem.js","components/MenuItems.js","components/Navigation.js","components/FeaturedItems.js","components/App/App.js","index.js"],"names":["MenuItemOrderByInput","Header","title","GetMenuItemsDocument","gql","useGetMenuItemsQuery","baseOptions","ApolloReactHooks","VerticallyCenteredModal","props","Modal","size","aria-labelledby","centered","closeButton","Title","id","menuItem","catagory","Body","name","description","style","textAlign","formattedPrice","Footer","Button","onClick","onHide","MenuItem","menuItemProp","React","useState","modalShow","setModalShow","show","variant","block","MenuItems","data","loading","error","Fragment","menuItems","map","index","Card","key","width","display","margin","Img","src","Math","random","alt","Navigation","Nav","className","activeKey","Item","Link","href","eventKey","FeaturedItems","setIndex","direction","setDirection","Carousel","activeIndex","onSelect","selectedIndex","e","Caption","App","client","ApolloClient","uri","process","root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd01d2f7.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type AggregateMenuItem = {\n   __typename?: 'AggregateMenuItem',\n  count: Scalars['Int'],\n};\n\n\n/** A generic MenuItem example */\nexport type MenuItem = {\n   __typename?: 'MenuItem',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  description?: Maybe<Scalars['String']>,\n  price: Scalars['Float'],\n  catagory?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['String']>,\n  createdAt: Scalars['DateTime'],\n  updatedAt: Scalars['DateTime'],\n  formattedPrice?: Maybe<Scalars['String']>,\n};\n\nexport type MenuItemConnection = {\n   __typename?: 'MenuItemConnection',\n  pageInfo: PageInfo,\n  edges: Array<MenuItemEdge>,\n  aggregate: AggregateMenuItem,\n};\n\nexport type MenuItemEdge = {\n   __typename?: 'MenuItemEdge',\n  node: MenuItem,\n  cursor: Scalars['String'],\n};\n\nexport enum MenuItemOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  DescriptionAsc = 'description_ASC',\n  DescriptionDesc = 'description_DESC',\n  PriceAsc = 'price_ASC',\n  PriceDesc = 'price_DESC',\n  CatagoryAsc = 'catagory_ASC',\n  CatagoryDesc = 'catagory_DESC',\n  TypeAsc = 'type_ASC',\n  TypeDesc = 'type_DESC',\n  SizeAsc = 'size_ASC',\n  SizeDesc = 'size_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type MenuItemWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n  description_not?: Maybe<Scalars['String']>,\n  description_in?: Maybe<Array<Scalars['String']>>,\n  description_not_in?: Maybe<Array<Scalars['String']>>,\n  description_lt?: Maybe<Scalars['String']>,\n  description_lte?: Maybe<Scalars['String']>,\n  description_gt?: Maybe<Scalars['String']>,\n  description_gte?: Maybe<Scalars['String']>,\n  description_contains?: Maybe<Scalars['String']>,\n  description_not_contains?: Maybe<Scalars['String']>,\n  description_starts_with?: Maybe<Scalars['String']>,\n  description_not_starts_with?: Maybe<Scalars['String']>,\n  description_ends_with?: Maybe<Scalars['String']>,\n  description_not_ends_with?: Maybe<Scalars['String']>,\n  price?: Maybe<Scalars['Float']>,\n  price_not?: Maybe<Scalars['Float']>,\n  price_in?: Maybe<Array<Scalars['Float']>>,\n  price_not_in?: Maybe<Array<Scalars['Float']>>,\n  price_lt?: Maybe<Scalars['Float']>,\n  price_lte?: Maybe<Scalars['Float']>,\n  price_gt?: Maybe<Scalars['Float']>,\n  price_gte?: Maybe<Scalars['Float']>,\n  catagory?: Maybe<Scalars['String']>,\n  catagory_not?: Maybe<Scalars['String']>,\n  catagory_in?: Maybe<Array<Scalars['String']>>,\n  catagory_not_in?: Maybe<Array<Scalars['String']>>,\n  catagory_lt?: Maybe<Scalars['String']>,\n  catagory_lte?: Maybe<Scalars['String']>,\n  catagory_gt?: Maybe<Scalars['String']>,\n  catagory_gte?: Maybe<Scalars['String']>,\n  catagory_contains?: Maybe<Scalars['String']>,\n  catagory_not_contains?: Maybe<Scalars['String']>,\n  catagory_starts_with?: Maybe<Scalars['String']>,\n  catagory_not_starts_with?: Maybe<Scalars['String']>,\n  catagory_ends_with?: Maybe<Scalars['String']>,\n  catagory_not_ends_with?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  type_not?: Maybe<Scalars['String']>,\n  type_in?: Maybe<Array<Scalars['String']>>,\n  type_not_in?: Maybe<Array<Scalars['String']>>,\n  type_lt?: Maybe<Scalars['String']>,\n  type_lte?: Maybe<Scalars['String']>,\n  type_gt?: Maybe<Scalars['String']>,\n  type_gte?: Maybe<Scalars['String']>,\n  type_contains?: Maybe<Scalars['String']>,\n  type_not_contains?: Maybe<Scalars['String']>,\n  type_starts_with?: Maybe<Scalars['String']>,\n  type_not_starts_with?: Maybe<Scalars['String']>,\n  type_ends_with?: Maybe<Scalars['String']>,\n  type_not_ends_with?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['String']>,\n  size_not?: Maybe<Scalars['String']>,\n  size_in?: Maybe<Array<Scalars['String']>>,\n  size_not_in?: Maybe<Array<Scalars['String']>>,\n  size_lt?: Maybe<Scalars['String']>,\n  size_lte?: Maybe<Scalars['String']>,\n  size_gt?: Maybe<Scalars['String']>,\n  size_gte?: Maybe<Scalars['String']>,\n  size_contains?: Maybe<Scalars['String']>,\n  size_not_contains?: Maybe<Scalars['String']>,\n  size_starts_with?: Maybe<Scalars['String']>,\n  size_not_starts_with?: Maybe<Scalars['String']>,\n  size_ends_with?: Maybe<Scalars['String']>,\n  size_not_ends_with?: Maybe<Scalars['String']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  AND?: Maybe<Array<MenuItemWhereInput>>,\n  OR?: Maybe<Array<MenuItemWhereInput>>,\n  NOT?: Maybe<Array<MenuItemWhereInput>>,\n};\n\nexport type MenuItemWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  deleteMenuItem?: Maybe<MenuItem>,\n};\n\n\nexport type MutationDeleteMenuItemArgs = {\n  where: MenuItemWhereUniqueInput\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n  endCursor?: Maybe<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  menuItem?: Maybe<MenuItem>,\n  menuItems: Array<MenuItem>,\n  menuItemsConnection: MenuItemConnection,\n};\n\n\nexport type QueryMenuItemArgs = {\n  where: MenuItemWhereUniqueInput\n};\n\n\nexport type QueryMenuItemsArgs = {\n  where?: Maybe<MenuItemWhereInput>,\n  orderBy?: Maybe<MenuItemOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryMenuItemsConnectionArgs = {\n  where?: Maybe<MenuItemWhereInput>,\n  orderBy?: Maybe<MenuItemOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type GetMenuItemsQueryVariables = {};\n\n\nexport type GetMenuItemsQuery = (\n  { __typename?: 'Query' }\n  & { menuItems: Array<(\n    { __typename?: 'MenuItem' }\n    & Pick<MenuItem, 'name' | 'formattedPrice' | 'description' | 'catagory' | 'id'>\n  )> }\n);\n\nexport type GetEntreesQueryVariables = {};\n\n\nexport type GetEntreesQuery = (\n  { __typename?: 'Query' }\n  & { menuItems: Array<(\n    { __typename?: 'MenuItem' }\n    & Pick<MenuItem, 'name' | 'description' | 'id' | 'catagory'>\n  )> }\n);\n\nexport type GetAppetizersQueryVariables = {};\n\n\nexport type GetAppetizersQuery = (\n  { __typename?: 'Query' }\n  & { menuItems: Array<(\n    { __typename?: 'MenuItem' }\n    & Pick<MenuItem, 'name' | 'description' | 'id' | 'catagory'>\n  )> }\n);\n\nexport type GetDessertsQueryVariables = {};\n\n\nexport type GetDessertsQuery = (\n  { __typename?: 'Query' }\n  & { menuItems: Array<(\n    { __typename?: 'MenuItem' }\n    & Pick<MenuItem, 'name' | 'description' | 'id' | 'catagory'>\n  )> }\n);\n\n\nexport const GetMenuItemsDocument = gql`\n    query getMenuItems {\n  menuItems {\n    name\n    formattedPrice\n    description\n    catagory\n    id\n  }\n}\n    `;\nexport type GetMenuItemsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetMenuItemsQuery, GetMenuItemsQueryVariables>, 'query'>;\n\n    export const GetMenuItemsComponent = (props: GetMenuItemsComponentProps) => (\n      <ApolloReactComponents.Query<GetMenuItemsQuery, GetMenuItemsQueryVariables> query={GetMenuItemsDocument} {...props} />\n    );\n    \nexport type GetMenuItemsProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetMenuItemsQuery, GetMenuItemsQueryVariables> | TChildProps;\nexport function withGetMenuItems<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetMenuItemsQuery,\n  GetMenuItemsQueryVariables,\n  GetMenuItemsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetMenuItemsQuery, GetMenuItemsQueryVariables, GetMenuItemsProps<TChildProps>>(GetMenuItemsDocument, {\n      alias: 'getMenuItems',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetMenuItemsQuery__\n *\n * To run a query within a React component, call `useGetMenuItemsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMenuItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMenuItemsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMenuItemsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetMenuItemsQuery, GetMenuItemsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetMenuItemsQuery, GetMenuItemsQueryVariables>(GetMenuItemsDocument, baseOptions);\n      }\nexport function useGetMenuItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetMenuItemsQuery, GetMenuItemsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetMenuItemsQuery, GetMenuItemsQueryVariables>(GetMenuItemsDocument, baseOptions);\n        }\nexport type GetMenuItemsQueryHookResult = ReturnType<typeof useGetMenuItemsQuery>;\nexport type GetMenuItemsLazyQueryHookResult = ReturnType<typeof useGetMenuItemsLazyQuery>;\nexport type GetMenuItemsQueryResult = ApolloReactCommon.QueryResult<GetMenuItemsQuery, GetMenuItemsQueryVariables>;\nexport const GetEntreesDocument = gql`\n    query getEntrees {\n  menuItems(where: {catagory: \"Entree\"}) {\n    name\n    description\n    id\n    catagory\n  }\n}\n    `;\nexport type GetEntreesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetEntreesQuery, GetEntreesQueryVariables>, 'query'>;\n\n    export const GetEntreesComponent = (props: GetEntreesComponentProps) => (\n      <ApolloReactComponents.Query<GetEntreesQuery, GetEntreesQueryVariables> query={GetEntreesDocument} {...props} />\n    );\n    \nexport type GetEntreesProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetEntreesQuery, GetEntreesQueryVariables> | TChildProps;\nexport function withGetEntrees<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetEntreesQuery,\n  GetEntreesQueryVariables,\n  GetEntreesProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetEntreesQuery, GetEntreesQueryVariables, GetEntreesProps<TChildProps>>(GetEntreesDocument, {\n      alias: 'getEntrees',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetEntreesQuery__\n *\n * To run a query within a React component, call `useGetEntreesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetEntreesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetEntreesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetEntreesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetEntreesQuery, GetEntreesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetEntreesQuery, GetEntreesQueryVariables>(GetEntreesDocument, baseOptions);\n      }\nexport function useGetEntreesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetEntreesQuery, GetEntreesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetEntreesQuery, GetEntreesQueryVariables>(GetEntreesDocument, baseOptions);\n        }\nexport type GetEntreesQueryHookResult = ReturnType<typeof useGetEntreesQuery>;\nexport type GetEntreesLazyQueryHookResult = ReturnType<typeof useGetEntreesLazyQuery>;\nexport type GetEntreesQueryResult = ApolloReactCommon.QueryResult<GetEntreesQuery, GetEntreesQueryVariables>;\nexport const GetAppetizersDocument = gql`\n    query getAppetizers {\n  menuItems(where: {catagory: \"Appetizer\"}) {\n    name\n    description\n    id\n    catagory\n  }\n}\n    `;\nexport type GetAppetizersComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetAppetizersQuery, GetAppetizersQueryVariables>, 'query'>;\n\n    export const GetAppetizersComponent = (props: GetAppetizersComponentProps) => (\n      <ApolloReactComponents.Query<GetAppetizersQuery, GetAppetizersQueryVariables> query={GetAppetizersDocument} {...props} />\n    );\n    \nexport type GetAppetizersProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetAppetizersQuery, GetAppetizersQueryVariables> | TChildProps;\nexport function withGetAppetizers<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetAppetizersQuery,\n  GetAppetizersQueryVariables,\n  GetAppetizersProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetAppetizersQuery, GetAppetizersQueryVariables, GetAppetizersProps<TChildProps>>(GetAppetizersDocument, {\n      alias: 'getAppetizers',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetAppetizersQuery__\n *\n * To run a query within a React component, call `useGetAppetizersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAppetizersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAppetizersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAppetizersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAppetizersQuery, GetAppetizersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetAppetizersQuery, GetAppetizersQueryVariables>(GetAppetizersDocument, baseOptions);\n      }\nexport function useGetAppetizersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAppetizersQuery, GetAppetizersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetAppetizersQuery, GetAppetizersQueryVariables>(GetAppetizersDocument, baseOptions);\n        }\nexport type GetAppetizersQueryHookResult = ReturnType<typeof useGetAppetizersQuery>;\nexport type GetAppetizersLazyQueryHookResult = ReturnType<typeof useGetAppetizersLazyQuery>;\nexport type GetAppetizersQueryResult = ApolloReactCommon.QueryResult<GetAppetizersQuery, GetAppetizersQueryVariables>;\nexport const GetDessertsDocument = gql`\n    query getDesserts {\n  menuItems(where: {catagory: \"Dessert\"}) {\n    name\n    description\n    id\n    catagory\n  }\n}\n    `;\nexport type GetDessertsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetDessertsQuery, GetDessertsQueryVariables>, 'query'>;\n\n    export const GetDessertsComponent = (props: GetDessertsComponentProps) => (\n      <ApolloReactComponents.Query<GetDessertsQuery, GetDessertsQueryVariables> query={GetDessertsDocument} {...props} />\n    );\n    \nexport type GetDessertsProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetDessertsQuery, GetDessertsQueryVariables> | TChildProps;\nexport function withGetDesserts<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetDessertsQuery,\n  GetDessertsQueryVariables,\n  GetDessertsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetDessertsQuery, GetDessertsQueryVariables, GetDessertsProps<TChildProps>>(GetDessertsDocument, {\n      alias: 'getDesserts',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetDessertsQuery__\n *\n * To run a query within a React component, call `useGetDessertsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetDessertsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetDessertsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetDessertsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDessertsQuery, GetDessertsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetDessertsQuery, GetDessertsQueryVariables>(GetDessertsDocument, baseOptions);\n      }\nexport function useGetDessertsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDessertsQuery, GetDessertsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetDessertsQuery, GetDessertsQueryVariables>(GetDessertsDocument, baseOptions);\n        }\nexport type GetDessertsQueryHookResult = ReturnType<typeof useGetDessertsQuery>;\nexport type GetDessertsLazyQueryHookResult = ReturnType<typeof useGetDessertsLazyQuery>;\nexport type GetDessertsQueryResult = ApolloReactCommon.QueryResult<GetDessertsQuery, GetDessertsQueryVariables>;","import React from 'react'\n\n\nconst Header = () => (\n    <div>\n        <h1 title=\"main-header\">\n            Calhoun Corners\n        </h1>\n    </div>\n)\n\nexport default Header","import React from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nconst VerticallyCenteredModal = (props) => {\n\n  return (\n    <Modal\n      {...props}\n      size=\"md\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {props.menuItem.catagory}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h5>{props.menuItem.name}</h5>\n        <p>\n          {props.menuItem.description}\n          <p style={{ textAlign: \"right\" }} >{props.menuItem.formattedPrice}</p>\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\nexport default VerticallyCenteredModal","import React from 'react'\nimport VerticallyCenteredModal from './VerticallyCenteredModal'\nimport Button from 'react-bootstrap/Button'\n\n\nconst MenuItem = (props) => {\n    const menuItem = props.menuItemProp\n    const [modalShow, setModalShow] = React.useState(false);\n\n    return (\n        <div>\n            <VerticallyCenteredModal\n                menuItem={menuItem}\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n            />\n            <Button variant=\"outline-info\" size=\"sm\" onClick={() => setModalShow(true)} block>\n                {menuItem.name}\n            </Button>\n        </div >\n    )\n}\nexport default MenuItem","import React from 'react'\nimport { useGetMenuItemsQuery } from '../generated/apollo-components'\nimport MenuItem from './MenuItem'\nimport Card from 'react-bootstrap/Card'\n\n\n\nconst MenuItems = () => {\n    const { data, loading, error } = useGetMenuItemsQuery()\n\n    if (loading) return \"Loading...\"\n    if (error) return \"Error...\"\n\n    return (\n        <React.Fragment>\n        <div style={{ textAlign: 'center' }}>\n            {\n                data.menuItems.map((menuItem, index) => (\n                    <Card key={menuItem.id} style={{ width: '20rem', display: 'inline-block', margin: '20px' }}>\n                        {/* <img src={`https://source.unsplash.com/300x120/?${menuItem.catagory},${menuItem.name}&random=${Math.random()}`} alt=\"Menu Item\" /> */}\n                        <Card.Img variant=\"top\" src={`https://source.unsplash.com/300x120/?${menuItem.catagory},${menuItem.name}&random=${Math.random()}`} alt=\"Menu Item\" />\n                        <MenuItem menuItemProp={menuItem} key={menuItem.id} id={menuItem.id} index={index} />\n                    </Card>\n                ))\n            }\n        </div>\n        </React.Fragment>\n    )\n}\nexport default MenuItems","import React from 'react'\nimport Nav from 'react-bootstrap/Nav'\n\n\n\nconst Navigation = (props) => {\n    return(\n      \n        <Nav className=\"justify-content-end\" activeKey=\"/home\">\n          <Nav.Item>\n            <Nav.Link href=\"/home\">HOME</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"link-1\">MENU</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"link-2\">ABOUT</Nav.Link>\n          </Nav.Item>\n        </Nav>\n    )\n}\n\nexport default Navigation\n","import React from 'react'\nimport Carousel from 'react-bootstrap/Carousel'\nimport { useGetMenuItemsQuery } from '../generated/apollo-components'\n\n\nconst FeaturedItems = (props) => {\n\n  const { data, loading, error } = useGetMenuItemsQuery()\n\n  const [index, setIndex] = React.useState(0);\n  const [direction, setDirection] = React.useState(null);\n\n\n  if (loading) return 'loading'\n  if (error) return 'error'\n\n  // console.log(props.MenuItems);\n\n\n  const handleSelect = (selectedIndex, e) => {\n    setIndex(selectedIndex);\n    setDirection(e.direction);\n  };\n\n  return (\n    <Carousel activeIndex={index} direction={direction} onSelect={handleSelect} >\n      <Carousel.Item>\n        <img\n          src={`https://source.unsplash.com/1920x1080/?${data.menuItems[0].name}`}\n          alt=\"Menu Item\"\n        />\n        <Carousel.Caption>\n          <h3>{data.menuItems[0].name}</h3>\n          <p>{data.menuItems[0].description}</p>\n        </Carousel.Caption>\n      </Carousel.Item>\n      <Carousel.Item>\n        <img\n          src={`https://source.unsplash.com/1920x1080/?${data.menuItems[1].name}`}\n          alt=\"Menu Item\"\n        />\n\n        <Carousel.Caption>\n          <h3>{data.menuItems[1].name}</h3>\n          <p>{data.menuItems[1].description}</p>\n\n        </Carousel.Caption>\n      </Carousel.Item>\n      <Carousel.Item>\n        <img\n          src={`https://source.unsplash.com/1920x1080/?${data.menuItems[2].name}`}\n          alt=\"Menu Item\"\n        />\n\n        <Carousel.Caption>\n          <h3>{data.menuItems[2].name}</h3>\n          <p>{data.menuItems[2].description}</p>\n        </Carousel.Caption>\n      </Carousel.Item>\n    </Carousel>\n  );\n}\n\nexport default FeaturedItems","import React from 'react'\nimport Header from '../Header'\nimport MenuItems from '../MenuItems'\nimport Navigation from '../Navigation'\nimport FeaturedItems from '../FeaturedItems'\n\n\nconst App = () => {\n\n  return (\n    <div>\n      <Header />\n      <Navigation />\n      <FeaturedItems />\n      <MenuItems />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_APOLLO_SERVER || 'http://localhost:4000',\n});\n\nconst root = (\n  <Router>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n\n  </Router>\n);\n\nReactDOM.render(root, document.getElementById('root'));\n"],"sourceRoot":""}